Code Breakdown:

import numpy as np

# Create a 2D NumPy array
arr = np.array([[1, 2, 3], [4, 5, 6]])

# Iterate over each row in the array
for x in arr:
    # Iterate over each element in the row
    for y in x:
        print(y)
Step-by-Step Illustration:
Creating the Array:

arr = np.array([[1, 2, 3], [4, 5, 6]]) creates a 2x3 NumPy array that looks like this:
lua

[[1, 2, 3],
 [4, 5, 6]]
First Iteration (Outer Loop):

The outer for loop starts iterating over each row of the array.
In the first iteration, x is the first row [1, 2, 3].
Second Iteration (Inner Loop):

The inner for loop then iterates over each element of the current row x.
In the first iteration of the inner loop, y is 1. It prints 1.
In the next iteration, y is 2. It prints 2.
In the next iteration, y is 3. It prints 3.
Second Iteration of Outer Loop:

The outer loop proceeds to the next row, so x becomes [4, 5, 6].
Second Iteration of Inner Loop:

The inner loop again iterates over each element of the current row x.
It prints 4, 5, and 6 in sequence.
Output:

1
2
3
4
5
6
This output is generated by iterating over each element in the 2D array and printing it in a row-by-row manner.





Iterating Arrays Using nditer():
The function nditer() is a helping function that can be used from very basic to very advanced iterations. It solves some basic issues which we face in iteration, lets go through it with examples.

Iterating on Each Scalar Element
In basic for loops, iterating through each scalar of an array we need to use n for loops which can be difficult to write for arrays with very high dimensionality.



Iterating Array With Different Data Types:
We can use op_dtypes argument and pass it the expected datatype to change the datatype of elements while iterating.

NumPy does not change the data type of the element in-place (where the element is in array) so it needs some other space to perform this action, that extra space is called buffer, and in order to enable it in nditer() we pass flags=['buffered'].


The slicing operation [:, ::2] is a way to extract specific elements from a NumPy array, particularly when working with 2D arrays (matrices). Let's break it down:

Syntax Breakdown:
: — This indicates that you want to select all rows.
::2 — This is a slice that means "start at the beginning (default), go until the end (default), and step by 2."

What It Does:
The [:, ::2] operation selects all rows and then every second column of the array.


The ndenumerate() method in NumPy is used to iterate over the elements of an array while also keeping track of the indices of each element. 
idx is a tuple representing the position of the element in the array.


The dstack() function in NumPy stacks arrays along the third dimension (depth) to form a new array. It’s like stacking 2D arrays to form a 3D array.

Filter Array:
If the value at an index is True that element is contained in the filtered array, if the value at that index is False that element is excluded from the filtered array.